<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaoyi.manager.dao.teaching.ITeachingResourceDao">
	<resultMap id="BaseResultMap" type="com.xiaoyi.manager.domain.Teacher">
		<id column="teacherId" property="teacherid" jdbcType="VARCHAR" />
		<result column="teacherName" property="teachername" jdbcType="VARCHAR" />
		<result column="picId" property="picid" jdbcType="VARCHAR" />
		<result column="schoolId" property="schoolid" jdbcType="VARCHAR" />
		<result column="gradeId" property="gradeid" jdbcType="VARCHAR" />
		<result column="sex" property="sex" jdbcType="BIT" />
		<result column="education" property="education" jdbcType="TINYINT" />
		<result column="telNumber" property="telnumber" jdbcType="VARCHAR" />
		<result column="teachingLevel" property="teachinglevel"
			jdbcType="TINYINT" />
		<result column="regDate" property="regdate" jdbcType="TIMESTAMP" />
		<result column="notes" property="notes" jdbcType="VARCHAR" />
		<result column="openId" property="openId" jdbcType="VARCHAR" />
		<result column="signed" property="signed" jdbcType="BIT" />
	</resultMap>
	<sql id="Base_Column_List">
		teacherId, teacherName, picId, schoolId, gradeId, sex,
		education, telNumber,
		teachingLevel,
		regDate, notes, openId, signed
	</sql>
	<!-- i. 查询教员信息列表 -->
	<select id="selectTeachingResourceList" parameterType="java.util.List"
		resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM teacher
		WHERE telNumber in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item}
		</foreach>
	</select>

	<!-- 导入教员信息 -->
	<insert id="insertTeachingResourceList" parameterType="java.util.List">
		insert
		into teacher (teacherId, teacherName, picId, schoolId, gradeId,
		sex,
		education, telNumber, teachingLevel, regDate, notes,openId,signed)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.teacherid}, #{item.teachername},#{item.picid},
			#{item.schoolid}, #{item.gradeid},
			#{item.sex},#{item.education},#{item.telnumber},#{item.teachinglevel},
			#{item.regdate}, #{item.notes},#{item.openId},#{item.signed})
		</foreach>
	</insert>

	<!-- <resultMap id="BaseResultMap" type="com.xiaoyi.manager.domain.Picture"> 
		<id column="picId" property="picid" jdbcType="VARCHAR" /> <result column="picUrl" 
		property="picurl" jdbcType="VARCHAR" /> <result column="picName" property="picname" 
		jdbcType="VARCHAR" /> <result column="picType" property="pictype" jdbcType="TINYINT" 
		/> </resultMap> <sql id="Base_Column_List"> picId, picUrl, picName, picType 
		</sql> -->
	<insert id="insertTeacherImages" parameterType="java.util.List">
		insert
		into picture(picId, picUrl, picName, picType)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.picid},#{item.picurl},#{item.picname},#{item.pictype})
		</foreach>
	</insert>

	<!-- 查询学校 -->
	<select id="selectSchoolByNames" parameterType="java.util.List"
		resultType="com.xiaoyi.manager.domain.School">
		select *from school
		where
		schoolName in
		<foreach collection="list" item="item" open="(" separator=","
			close=")">
			#{item}
		</foreach>
	</select>

	<!-- 新增学校列表 -->
	<insert id="insertSchoolList" parameterType="java.util.List">
		insert
		into school(schoolId, schoolName, schoolAddress, termInfo)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.schoolid}, #{item.schoolname}, #{item.schooladdress},
			#{item.terminfo})
		</foreach>
	</insert>

	<!-- 新增老师用户列表（登录用） -->
	<!-- <sql id="Base_Column_List"> userAccountId, userId, userName, password, 
		userType, userPrivilege, loginStatus, openId, nickname </sql> <sql id="Blob_Column_List"> 
		headimgurl </sql> -->
	<insert id="insertTUserList">
		insert
		into user(userAccountId, userId, userName, password, userType,
		userPrivilege, loginStatus,
		openId, nickname,headimgurl)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.useraccountid,jdbcType=VARCHAR},
			#{item.userid,jdbcType=VARCHAR},#{item.username,jdbcType=VARCHAR},
			#{item.password,jdbcType=VARCHAR}, #{item.usertype,jdbcType=TINYINT},
			#{item.userprivilege,jdbcType=TINYINT},
			#{item.loginstatus,jdbcType=BIT}, #{item.openid,jdbcType=VARCHAR},
			#{item.nickname,jdbcType=VARCHAR},#{item.headimgurl,jdbcType=LONGVARCHAR})
		</foreach>
	</insert>

	<!-- 获取师资列表（课时） -->
	<select id="selectTeachingsByParams" parameterType="hashmap" resultType="com.alibaba.fastjson.JSONObject">
		SELECT a.teacherId,a.checkedLessonNum,a.withDrawLessonNum,a.frozenLessonNum,b.teacherName,b.sex,
			b.telNumber,b.regDate,b.schoolId,b.openId,c.schoolName
		FROM lessontradesum a 
			LEFT JOIN teacher b ON a.teacherId=b.teacherId
			LEFT JOIN school c ON b.schoolId=c.schoolId
		WHERE b.signed=1 
		<if test="totalLessonNum!=null">
			AND a.totalLessonNum &lt; #{totalLessonNum}	
		</if>
		<if test="teacherName!=null">
			AND b.teacherName LIKE '%${teacherName}%' 
		</if>
		<if test="telNumber!=null">
			AND b.telNumber LIKE '%${telNumber}%'	
		</if>
	</select>
	
	<select id="selectTeachersByParams" parameterType="hashmap" resultType="com.alibaba.fastjson.JSONObject">
		SELECT b.teacherName,b.teacherId,b.sex,b.telNumber,b.regDate,b.schoolId,b.openId,c.schoolName,d.picUrl,
			b.teachingLevel,b.education,b.notes,b.gradeId,b.signed
		FROM teacher b 
			LEFT JOIN school c ON b.schoolId=c.schoolId
			LEFT JOIN picture d ON b.picId=d.picId
		<where>
			<if test="teacherName!=null">
				b.teacherName LIKE '%${teacherName}%' 
			</if>
			<if test="telNumber!=null">
				AND b.telNumber LIKE '%${telNumber}%'	
			</if>
			<if test="gradeId!=null">
				AND gradeId=#{gradeId}
			</if>
			<if test="education!=null">
				AND b.education=#{education}
			</if>
			<if test="sex!=null">
				AND b.sex=#{sex}
			</if>
			<if test="teachingLevel!=null">
				AND b.teachingLevel=#{teachingLevel}
			</if>
		</where>
	</select>
</mapper>